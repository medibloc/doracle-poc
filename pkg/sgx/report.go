package sgx

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"github.com/edgelesssys/ego/enclave"
)

/*// If you want is not SGX environment execute, you can use below methods.

func GenerateRemoteReport(data []byte) ([]byte, error) {
	return data, nil
}

func VerifyRemoteReport(reportBytes, expectedData []byte) error {
	return nil
}

func VerifyRemoteReportAndGetData(reportBytes []byte, signerID string) ([]byte, error) {
	return reportBytes, nil
}*/

// GenerateRemoteReport generates a SGX report containing the specified data for use in remote attestation.
// This works only in the SGX-FLC environment where the SGX quote provider is installed.
func GenerateRemoteReport(data []byte) ([]byte, error) {
	return enclave.GetRemoteReport(data)
}

const (
	promisedMinSecurityVersion = 1
	promisedProductID          = 1
	promisedSignerID           = "be9577a203acebd6957b180cc6ccd4a1a66d03e81657d7e7584ef469de5b9b99"
)

// VerifyRemoteReport verifies whether the report not only was properly generated in the SGX environment,
// but also contains the promised security version, product ID, and signer ID,
// in order to verify that the report was generated by the promised binary which was not forged.
func VerifyRemoteReport(reportBytes, expectedData []byte) error {
	data, err := VerifyRemoteReportAndGetData(reportBytes, promisedSignerID)
	if err != nil {
		return err
	}

	if !bytes.Equal(data[:len(expectedData)], expectedData) {
		return fmt.Errorf("invalid data in the report")
	}
	//TODO: check unique ID

	return nil
}

func VerifyRemoteReportAndGetData(reportBytes []byte, signerID string) ([]byte, error) {
	report, err := enclave.VerifyRemoteReport(reportBytes)
	// if err == attestation.ErrTCBLevelInvalid {
	// 	fmt.Printf("Warning: TCB level is invalid: %v\n%v\n", report.TCBStatus, tcbstatus.Explain(report.TCBStatus))
	// 	fmt.Println("We'll ignore this issue in this sample. For an app that should run in production, you must decide which of the different TCBStatus values are acceptable for you to continue.")
	// }
	if err != nil {
		return nil, fmt.Errorf("failed to verify report: %w", err)
	}

	if report.SecurityVersion < promisedMinSecurityVersion {
		return nil, fmt.Errorf("invalid security version in the report")
	}
	if binary.LittleEndian.Uint16(report.ProductID) != promisedProductID {
		return nil, fmt.Errorf("invalid product ID in the report")
	}
	if hex.EncodeToString(report.SignerID) != signerID {
		return nil, fmt.Errorf("invalid signer ID in the report")
	}

	return report.Data, nil
}
